@mixin grid($columns: 1, $min-height:"") {
  margin: 0;
  margin-right: -1em; // Negates effect of rightmost gutter
  @include ie-lte(7){
    margin-bottom: 1em;
  }
  padding: 0;
  @include clearfix;
  > * { 
    display: block;
    margin: 0;
    padding: 0;
    list-style-type: none;
    list-style-image: none;
    @include box-sizing(border-box);
    float: left;
    border-right: solid 1em $white;
    margin-bottom: 1em;
    &:first-child{
      margin-top: 0;
    };

    // Number of columns
    $numCols: length($columns);

    // If only one value passed, interpret the value as the number of columns of equal width
    @if $numCols == 1 {
      width: percentage(1/$columns);

    } @else {
    // If multiple values passed, each one represents a column and the values are their relative widths

      // Sum of all values. Used to calculate column widths
      $sum:0;
      @each $column in $columns{
        $sum:$sum+$column;
      }

      // Use nth-child to assign widths to each item
      $i:1;
      @each $column in $columns{
        &:nth-child(#{$numCols}n+#{$i}){
          width: percentage($column/$sum);
        }

        @include ie-lte(8){

          //@if $i == 1 { &:first-child{ width: percentage($column/$sum); }}
          //@if $i == 2 { &:first-child + *{ width: percentage($column/$sum); }}
          //@if $i == 3 { &:first-child + * + *{ width: percentage($column/$sum); }}
          //@if $i == 4 { &:first-child + * + * + *{ width: percentage($column/$sum); }}
        }

        $i:$i+1;
      }





    }

    @if ($min-height != ""){
      min-height: $min-height;
    }

    // Switch to single column for mobile layouts
    @include media(mobile){
      width: 100% !important;
    }
  }
}

